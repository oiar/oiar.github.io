<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Js on Oiar</title>
    <link>/series/js/</link>
    <description>Recent content in Js on Oiar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Wed, 27 Mar 2019 17:12:24 +0800</lastBuildDate>
    
	<atom:link href="/series/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript 代码风格</title>
      <link>/blog/2019-03/javascript-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/</link>
      <pubDate>Wed, 27 Mar 2019 17:12:24 +0800</pubDate>
      
      <guid>/blog/2019-03/javascript-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/</guid>
      <description>解构赋值 function bar() { return {a: 1, b: 2, c: 3}; } let { a, c } = bar(); console.log(a); // 1 console.log(c); // 3 console.log(b); // undefined function baz() { return { x: &#39;car&#39;, y: &#39;London&#39;, z: { name: &#39;John&#39;, age: 21} }; } let { x: vehicle, y: city, z: { name: driver } } = baz(); console.log( `I&#39;m going to ${city} with ${driver} in their ${vehicle}.` ); // I&#39;m going to London with John in their car. 箭头函数 箭头函数一个最重要的用途之一就是应用在数组的相关函数中，像.map，.forEach，.sort等等。 let arr = [ 5, 6, 7, 8, &#39;a&#39; ]; let b = arr.map( item =&amp;gt; item + 3 ); console.log(b); // [ 8, 9, 10, 11, &#39;a3&#39; ] for&amp;hellip;of 循环 let a = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39; ]; // ES6 for ( var val of a ) { console.log( val ); } // &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot; &amp;quot;d&amp;quot; // pre-ES6 for</description>
    </item>
    
    <item>
      <title>JavaScript 值类型和引用类型</title>
      <link>/blog/2019-03/javascript-%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 27 Mar 2019 11:26:38 +0800</pubDate>
      
      <guid>/blog/2019-03/javascript-%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</guid>
      <description>值类型 值类型（基本类型）：字符串（String）、数值（Number）、布尔值（Boolean）、Undefined、Null （这5种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值 引用类型 引用类型：对象（Object）、数组（Array）、函数（Function） 两者区别 （1）值类型 占用空间固定，保存在栈中（栈：当一个方法执行时，每个方法都会建立自己的内存栈，随着方法执行结束后，内存</description>
    </item>
    
    <item>
      <title>javaScript 原始类型</title>
      <link>/blog/2019-03/javascript-%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Tue, 26 Mar 2019 22:23:30 +0800</pubDate>
      
      <guid>/blog/2019-03/javascript-%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>javaScript 执行机制</title>
      <link>/blog/2019-03/javascript-%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 26 Mar 2019 19:54:38 +0800</pubDate>
      
      <guid>/blog/2019-03/javascript-%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</guid>
      <description>关于JavaScript JavaScript 是一门单线程语言 JavaScript事件循环 为解决任务耗时过长，将任务分为两类： 同步任务 异步任务 js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。 let data = []; $.ajax({ url:www.javascript.com, data:data, success:() =&amp;gt; { console.log(&#39;发送成功!&#39;); } }) console.log(&#39;代码执行结束&#39;); 上面是一段</description>
    </item>
    
  </channel>
</rss>